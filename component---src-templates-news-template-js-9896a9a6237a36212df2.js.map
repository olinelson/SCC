{"version":3,"sources":["webpack:///./src/templates/newsTemplate.js"],"names":["pageQuery","Template","data","markdownRemark","featureImageQuery","frontmatter","html","prettyDate","moment","date","calendar","style","maxHeight","fluid","nodes","hidden","text","title","className","dangerouslySetInnerHTML","__html"],"mappings":"8FAAA,wJAiCO,IAAMA,EAAS,aA2BPC,UArDf,YAEI,IADFC,EACC,EADDA,KAEQC,EAAsCD,EAAtCC,eAAgBC,EAAsBF,EAAtBE,kBAChBC,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACfC,EAAaC,IAAOH,EAAYI,MAAMC,WAC5C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAO,CAAEC,UAAW,QACpBC,MAAOT,EAAkBU,MAAM,GAAGD,QAEpC,kBAAC,IAAD,CAASE,QAAM,IACf,kBAAC,IAAD,CAAWC,MAAI,GACb,4BAAKX,EAAYY,OACjB,+BAAQV,GACR,kBAAC,IAAD,CAASQ,QAAM,IACf,yBACEG,UAAU,oBACVC,wBAAyB,CAAEC,OAAQd,KAErC,kBAAC,IAAD,CAASS,QAAM","file":"component---src-templates-news-template-js-9896a9a6237a36212df2.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport { Container, Divider } from 'semantic-ui-react'\nimport Img from 'gatsby-image'\nimport moment from 'moment'\n\nfunction Template ({\n  data // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark, featureImageQuery } = data\n  const { frontmatter, html } = markdownRemark\n  const prettyDate = moment(frontmatter.date).calendar()\n  return (\n    <Layout>\n      <Img\n        style={{ maxHeight: '40vh' }}\n        fluid={featureImageQuery.nodes[0].fluid}\n      />\n      <Divider hidden />\n      <Container text>\n        <h1>{frontmatter.title}</h1>\n        <small>{prettyDate}</small>\n        <Divider hidden />\n        <div\n          className='blog-post-content'\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n        <Divider hidden />\n      </Container>\n    </Layout>\n  )\n}\nexport const pageQuery = graphql`\n  query($path: String!, $featureImage: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        featureImage\n      }\n    }\n    site {\n      siteMetadata {\n        siteURL\n      }\n    }\n  featureImageQuery: allImageSharp(filter: {fluid: {originalName: {eq: $featureImage }}}) {\n    nodes {\n      id\n      __typename\n      fluid(fit: OUTSIDE) {\n        ...GatsbyImageSharpFluid\n      }\n    }\n  }\n  }\n`\nexport default Template\n"],"sourceRoot":""}